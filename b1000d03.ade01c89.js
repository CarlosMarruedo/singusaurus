(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{90:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return r})),a.d(t,"metadata",(function(){return o})),a.d(t,"toc",(function(){return s})),a.d(t,"default",(function(){return b}));var l=a(3),n=a(7),i=(a(0),a(106)),r={id:"problemsolving",title:"Problem Solving",slug:"/problemsolving"},o={unversionedId:"problemsolving",id:"problemsolving",isDocsHomePage:!1,title:"Problem Solving",description:"Whack-a-mole",source:"@site/docs\\problemsolving.md",slug:"/problemsolving",permalink:"/singusaurus/docs/problemsolving",editUrl:"https://github.com/Singulars2021/singusaurus/tree/main/docs/docs/problemsolving.md",version:"current",sidebar:"someSidebar",previous:{title:"SinguSaurus",permalink:"/singusaurus/docs/"}},s=[{value:"Whack-a-mole",id:"whack-a-mole",children:[{value:"Summary",id:"summary",children:[]},{value:"Requirements",id:"requirements",children:[]},{value:"Future requeriments",id:"future-requeriments",children:[]},{value:"Configuration and state management",id:"configuration-and-state-management",children:[]},{value:"User interface and DOM manipulation",id:"user-interface-and-dom-manipulation",children:[]}]}],m={toc:s};function b(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(i.b)("wrapper",Object(l.a)({},m,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"whack-a-mole"},"Whack-a-mole"),Object(i.b)("h3",{id:"summary"},"Summary"),Object(i.b)("p",null,"We want to implement a game which consist in ",Object(i.b)("a",Object(l.a)({parentName:"p"},{href:"https://romeojeremiah.github.io/whack-a-mole/"}),"smashing some moles")),Object(i.b)("h3",{id:"requirements"},"Requirements"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"The moles will show up from several holes in the ground."),Object(i.b)("li",{parentName:"ol"},"We need a button to allow the player to start the game"),Object(i.b)("li",{parentName:"ol"},"A counter will hold the player's score"),Object(i.b)("li",{parentName:"ol"},"There's a timer. When the timer reaches 0; the game ends."),Object(i.b)("li",{parentName:"ol"},"The moles will appear randomly and at different speed levels while there's game time remaining."),Object(i.b)("li",{parentName:"ol"},"When the time is over, moles stop popping up, and display a message of end with your score.")),Object(i.b)("h3",{id:"future-requeriments"},"Future requeriments"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"The holes could be replaced by different landscapes"),Object(i.b)("li",{parentName:"ol"},"The user could set up the game's level",Object(i.b)("ol",{parentName:"li"},Object(i.b)("li",{parentName:"ol"},"Number of holes"),Object(i.b)("li",{parentName:"ol"},"Min and max speed of mole's animation"),Object(i.b)("li",{parentName:"ol"},"Game time"))),Object(i.b)("li",{parentName:"ol"},"It could be fancy that all the moles show up before game starts. After game starts, all moles will hide."),Object(i.b)("li",{parentName:"ol"},"Allow to the user to set up the timer's visibility."),Object(i.b)("li",{parentName:"ol"},'When "Start" button pressed, we hide it and we display a "Restart" button'),Object(i.b)("li",{parentName:"ol"},"Scoreboard on localStorage",Object(i.b)("ol",{parentName:"li"},Object(i.b)("li",{parentName:"ol"},"Save the score"),Object(i.b)("li",{parentName:"ol"},"Save username with input will display at the end of game")))),Object(i.b)("h3",{id:"configuration-and-state-management"},"Configuration and state management"),Object(i.b)("p",null,"Which variables could be useful to hold our app state?"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Score",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Every succesfull hit on a mole, score goes one up"),Object(i.b)("li",{parentName:"ul"},"Restart the game, updates counter to 0"))),Object(i.b)("li",{parentName:"ul"},"Remaining game time",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"When the game restarts, the timer get the value of initial game time"),Object(i.b)("li",{parentName:"ul"},"Every second gets updated"))),Object(i.b)("li",{parentName:"ul"},"Game state: ready, end, playing ",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},'Ready: When the game loads and before user clicking "Start"'),Object(i.b)("li",{parentName:"ul"},"End: When the time finishes"),Object(i.b)("li",{parentName:"ul"},'Playing: User clicks "Start" button'))),Object(i.b)("li",{parentName:"ul"},"Next hole in which the mole will appear",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"When the previous mole finishes the showing animation, we calculate a new hole."))),Object(i.b)("li",{parentName:"ul"},"Max and min speed mole"),Object(i.b)("li",{parentName:"ul"},"Number of holes"),Object(i.b)("li",{parentName:"ul"},"Initial game time")),Object(i.b)("h3",{id:"user-interface-and-dom-manipulation"},"User interface and DOM manipulation"),Object(i.b)("h4",{id:"start"},"Start"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},'Pressing the "Start" button initialize the game')),Object(i.b)("h4",{id:"score"},"Score"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"We will use a textual counter inicialized at 0, and every time the user succesfully clicks a mole, the counter will get upgraded by one."),Object(i.b)("li",{parentName:"ul"},"At pressing the start button again to restart the game, the counter will get automatically updated to 0.")),Object(i.b)("h4",{id:"moles"},"Moles"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Before starting the game, under the start button, the user will see a grid system that will display the holes and moles ready for starting the game"),Object(i.b)("li",{parentName:"ul"},"When we start the game, we will hide the moles, and they will start popping up randomly and get ready to get clicked.")),Object(i.b)("h4",{id:"end-message"},"End Message"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"At the end of game, we show a message with the total score of the user")))}b.isMDXComponent=!0}}]);